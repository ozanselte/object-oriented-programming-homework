class ComposedShape
!!!130530.cpp!!!	ComposedShape(in c : Rectangle, in s : Rectangle)
    setContainerRectangle();
    setSmallRectangle();
!!!130658.cpp!!!	ComposedShape(in c : Rectangle, in s : Circle)
    setContainerRectangle();
    setSmallCircle();
!!!130786.cpp!!!	ComposedShape(in c : Rectangle, in s : Triangle)
    setContainerRectangle();
    setSmallTriangle();
!!!130914.cpp!!!	ComposedShape(in c : Circle, in s : Rectangle)
    setContainerCircle();
    setSmallRectangle();
!!!131042.cpp!!!	ComposedShape(in c : Circle, in s : Circle)
    setContainerCircle();
    setSmallCircle();
!!!131170.cpp!!!	ComposedShape(in c : Circle, in s : Triangle)
    setContainerCircle();
    setSmallTriangle();
!!!131298.cpp!!!	ComposedShape(in c : Triangle, in s : Rectangle)
    setContainerTriangle();
    setSmallRectangle();
!!!131426.cpp!!!	ComposedShape(in c : Triangle, in s : Circle)
    setContainerTriangle();
    setSmallCircle();
!!!131554.cpp!!!	ComposedShape(in c : Triangle, in s : Triangle)
    setContainerTriangle();
    setSmallTriangle();
!!!131682.cpp!!!	ComposedShape(in obj : ComposedShape)
    container = obj.container->clone();
    small = obj.small->clone();
    for(auto shape : obj.shapeVector){
        shapeVector.push_back(shape->clone());
    }
!!!131810.cpp!!!	operator =(in obj : ComposedShape) : ComposedShape
    delete container;
    delete small;
    for(auto shape : shapeVector){
        delete shape;
    }
    container = obj.container->clone();
    small = obj.small->clone();
    for(auto shape : obj.shapeVector){
        shapeVector.push_back(shape->clone());
    }
    return *this;
!!!131938.cpp!!!	~ComposedShape()
    delete container;
    delete small;
    for(auto shape : shapeVector){
        delete shape;
    }
!!!132706.cpp!!!	optimalFit() : void
    switch (smallShape){
        case ShapeType::Rectangle:
            rectangleOptimalFit();
            break;
        case ShapeType::Circle:
            circleOptimalFit();
            break;
        case ShapeType::Triangle:
            triangleOptimalFit();
            break;
    }
!!!132834.cpp!!!	operator +=(in obj : Rectangle) : ComposedShape
    shapeVector.push_back(new Rectangle(obj));
    return *this;
!!!132962.cpp!!!	operator +=(in obj : Circle) : ComposedShape
    shapeVector.push_back(new Circle(obj));
    return *this;
!!!133090.cpp!!!	operator +=(in obj : Triangle) : ComposedShape
    shapeVector.push_back(new Triangle(obj));
    return *this;
!!!133218.cpp!!!	operator [](in i : int) : Shape
    if(shapeVector.size() < i){
        throw out_of_range("Vector index cannot be higher than vector size!");
    }
    else if(0 > i){
        throw out_of_range("Vector index cannot be lower than 0!");
    }
    return *shapeVector[i];
!!!133346.cpp!!!	getShapeVector() : vector<Shape *>
    return shapeVector;
!!!133474.cpp!!!	area() : double
    return container->area();
!!!133602.cpp!!!	perimeter() : double
    return container->perimeter();
!!!133730.cpp!!!	draw(inout stream : ostream, in fill : string, in border : string) : void
    writeSvgBegin(stream);
    container->draw(stream, "red", "black");
    for(auto shape : shapeVector){
        shape->draw(stream, fill, border);
    }
    writeSvgEnd(stream);
!!!133858.cpp!!!	clone() : ComposedShape
    ComposedShape *copy = new ComposedShape(*this);
    return copy;
!!!133986.cpp!!!	operator ++() : ComposedShape
    for(auto shape : shapeVector){
        ++(*shape);
    }
    return *this;
!!!134114.cpp!!!	operator --() : ComposedShape
    for(auto shape : shapeVector){
        --(*shape);
    }
    return *this;
!!!134242.cpp!!!	operator ++(in  : int) : ComposedShape
    delete tempShape;
    tempShape = dynamic_cast<Shape *>(this->clone());
    ++(*this);
    return *dynamic_cast<ComposedShape *>(tempShape);
!!!134370.cpp!!!	operator --(in  : int) : ComposedShape
    delete tempShape;
    tempShape = dynamic_cast<Shape *>(this->clone());
    --(*this);
    return *dynamic_cast<ComposedShape *>(tempShape);
!!!134498.cpp!!!	setContainerRectangle() : void
    containerShape = ShapeType::Rectangle;
    width = dynamic_cast<Rectangle *>(container)->getWidth();
    height = dynamic_cast<Rectangle *>(container)->getHeight();
!!!134626.cpp!!!	setContainerCircle() : void
    containerShape = ShapeType::Circle;
    width = dynamic_cast<Circle *>(container)->getRadius() * 2;
    height = dynamic_cast<Circle *>(container)->getRadius() * 2;
!!!134754.cpp!!!	setContainerTriangle() : void
    containerShape = ShapeType::Triangle;
    width = dynamic_cast<Triangle *>(container)->getX(2) - dynamic_cast<Triangle *>(container)->getX(1);
    height = dynamic_cast<Triangle *>(container)->getY(1) - dynamic_cast<Triangle *>(container)->getY(0);
!!!134882.cpp!!!	setSmallRectangle() : void
    smallShape = ShapeType::Rectangle;
!!!135010.cpp!!!	setSmallCircle() : void
    smallShape = ShapeType::Circle;
!!!135138.cpp!!!	setSmallTriangle() : void
    smallShape = ShapeType::Triangle;
!!!135266.cpp!!!	writeSvgBegin(inout stream : ostream) : void
    stream <<
           "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" " <<
           "width=\"" << width << "\" "
           << "height=\"" << height << "\">" <<
           endl;
!!!135394.cpp!!!	writeSvgEnd(inout stream : ostream) : void
    stream <<
           "</svg>" <<
           endl;
!!!135522.cpp!!!	rectangleOptimalFit() : void
    Rectangle *rectangleSmall = dynamic_cast<Rectangle *>(small);
    bool doItHorizontal = (rectangleSmall->getHeight() > rectangleSmall->getWidth());
    if(doItHorizontal){
        rectangleFit(rectangleSmall->getHeight(), rectangleSmall->getWidth());
        rectangleFit(rectangleSmall->getWidth(), rectangleSmall->getHeight());
    }
    else{
        rectangleFit(rectangleSmall->getWidth(), rectangleSmall->getHeight());
        rectangleFit(rectangleSmall->getHeight(), rectangleSmall->getWidth());
    }
!!!135650.cpp!!!	rectangleFit(in w : int, in h : int) : void
    for(int i = 0; i < width-w+1; i++){
        for(int j = 0; j < height-h+1; j++){
            Rectangle *temp = new Rectangle(w, h, i, j);
            if(isRectangleFitsContainer(temp)){
                bool compatible = true;
                for(decltype(shapeVector.size()) k = 0; k < shapeVector.size(); k++){
                    if(!isRectanglesCompatible(temp, dynamic_cast<Rectangle *>(shapeVector[k]))){
                        compatible = false;
                    }
                }
                if(compatible){
                    shapeVector.push_back(temp);
                    j += (h-1);
                }
                else{
                    delete temp;
                }
            }
        }
    }
!!!135778.cpp!!!	circleOptimalFit() : void
    Circle *circleSmall = dynamic_cast<Circle *>(small);
    decltype(circleSmall->getRadius()) radius = circleSmall->getRadius();
    for(int i = 0; i < width-radius+1; i++){
        for(int j = 0; j < height-radius+1; j++){
            Circle *temp = new Circle(radius, i, j);
            if(isCircleFitsContainer(temp)){
                bool compatible = true;
                for(decltype(shapeVector.size()) k = 0; k < shapeVector.size(); k++){
                    if(!isCirclesCompatible(temp, dynamic_cast<Circle *>(shapeVector[k]))){
                        compatible = false;
                    }
                }
                if(compatible){
                    shapeVector.push_back(temp);
                    j += (radius-1);
                }
                else{
                    delete temp;
                }
            }
        }
    }
!!!135906.cpp!!!	triangleOptimalFit() : void
    Triangle *triangleSmall = dynamic_cast<Triangle *>(small);
    auto triangleH = abs(triangleSmall->getY(1) - triangleSmall->getY(0));
    auto sideLength = abs(triangleSmall->getX(2) - triangleSmall->getX(1));
    decltype(sideLength) halfSide = sideLength / 2.0;
    for(int j = 0; j < height-triangleH+1; j++){
        for(int i = halfSide; i < width-halfSide+1; i++){
            auto fit = triangleFit(sideLength, i, j, false);
            if(fit){
                j += (triangleH - 1);
            }
        }
    }
    for(int i = 0; i < width-halfSide+1; i++){
        for(int j = 0; j < height+1; j++){
            auto fit = triangleFit(sideLength, i, j, true);
            if(fit){
                j += (triangleH - 1);
            }
        }
    }
!!!136034.cpp!!!	triangleFit(in sideLength : int, in topX : int, in topY : int, in isUpsideDown : bool) : bool
    Triangle *temp = new Triangle(sideLength, topX, topY, isUpsideDown);
    if(isTriangleFitsContainer(temp)){
        bool compatible = true;
        for(decltype(shapeVector.size()) k = 0; k < shapeVector.size(); k++){
            if(!isTrianglesCompatible(temp, dynamic_cast<Triangle *>(shapeVector[k]))){
                compatible = false;
            }
        }
        if(compatible){
            shapeVector.push_back(temp);
            return true;
        }
        else{
            delete temp;
        }
    }
    return false;
!!!136162.cpp!!!	isPointFitsContainer(in pX : int, in pY : int) : bool
    switch (containerShape){
        case ShapeType::Rectangle:
            if(isPointFitsRectangle(pX, pY, dynamic_cast<Rectangle *>(container))){
                return true;
            }
            break;
        case ShapeType::Circle:
            if(isPointFitsCircle(pX, pY, dynamic_cast<Circle *>(container))){
                return true;
            }
            break;
        case ShapeType::Triangle:
            if(isPointFitsTriangle(pX, pY, dynamic_cast<Triangle *>(container))){
                return true;
            }
            break;
    }
    return false;
!!!136290.cpp!!!	isPointFitsRectangle(in pX : int, in pY : int, in obj : Rectangle) : bool
    auto w = obj->getWidth();
    auto h = obj->getHeight();
    auto x = obj->getX();
    auto y = obj->getY();
    if((x > pX) || (pX >= x + w)
       || (y > pY) || (pY >= y + h)){
        return false;
    }
    return true;
!!!136418.cpp!!!	isPointFitsCircle(in pX : int, in pY : int, in obj : Circle) : bool
    auto x = obj->getX();
    auto y = obj->getY();
    float r = obj->getRadius() - 0.5;
    if((pX-x)*(pX-x) + (pY-y)*(pY-y) <= r*r){
        return true;
    }
    return false;
!!!136546.cpp!!!	isPointFitsTriangle(in pX : int, in pY : int, in obj : Triangle) : bool
    auto a = obj->getX(0);
    auto b = obj->getY(0);
    auto border = obj->getY(1);
    auto isUpsideDown = (obj->getY(1) < obj->getY(0));
    if(isUpsideDown){
        if((pY - b) < (tan(120.0 * (180.0 / M_PI)) * (pX - a))
           && (pY - b) < (tan(60.0 * (180.0 / M_PI)) * (pX - a))){
            if(pY > border) {
                return true;
            }
        }
    }
    else{
        if((pY - b) >= (tan(120.0 * (180.0 / M_PI)) * (pX - a))
           && (pY - b) >= (tan(60.0 * (180.0 / M_PI)) * (pX - a))){
            if(pY < border){
                return true;
            }
        }
    }
    return false;
!!!136674.cpp!!!	isRectangleFitsContainer(in obj : Rectangle) : bool
    auto w = obj->getWidth() - 1;
    auto h = obj->getHeight() - 1;
    auto x = obj->getX();
    auto y = obj->getY();
    if(isPointFitsContainer(x, y)
       && isPointFitsContainer(x, y + h)
       && isPointFitsContainer(x + w, h)
       && isPointFitsContainer(x + w, y + h)){
        return true;
    }
    return false;
!!!136802.cpp!!!	isCircleFitsContainer(in obj : Circle) : bool
    auto r = obj->getRadius();
    auto x = obj->getX();
    auto y = obj->getY();
    if(isPointFitsContainer(x - r, y - r)
       && isPointFitsContainer(x - r, y + r)
       && isPointFitsContainer(x + r, y - r)
       && isPointFitsContainer(x + r, y + r)){
        return true;
    }
    return false;
!!!136930.cpp!!!	isTriangleFitsContainer(in obj : Triangle) : bool
    double a[] = {obj->getX(0), obj->getY(0)};
    double b[] = {obj->getX(1), obj->getY(1)};
    double c[] = {obj->getX(2), obj->getY(2)};
    if(isPointFitsContainer(a[0], a[1])
       && isPointFitsContainer(b[0], b[1])
       && isPointFitsContainer(c[0], c[1])){
        return true;
    }
    return false;
!!!137058.cpp!!!	isRectanglesCompatible(in a : Rectangle, in b : Rectangle) : bool
    auto aw = a->getWidth();
    auto ah = a->getHeight();
    auto ax = a->getX();
    auto ay = a->getY();
    for(int i = ax; i < ax + aw; i++){
        for(int j = ay; j < ay + ah; j++){
            if(isPointFitsRectangle(i, j, b)){
                return false;
            }
        }
    }
    return true;
!!!137186.cpp!!!	isCirclesCompatible(in a : Circle, in b : Circle) : bool
    auto ar = a->getRadius();
    auto ax = a->getX();
    auto ay = a->getY();
    for(int i = ax - ar; i < ax + ar - 1; i++){
        for(int j = ay - ar; j < ay + ar - 1; j++){
            if(isPointFitsCircle(i, j, b)){
                return false;
            }
        }
    }
    return true;
!!!137314.cpp!!!	isTrianglesCompatible(in a : Triangle, in b : Triangle) : bool
    double xA[] = {a->getX(0), a->getX(1), a->getX(2)};
    double yA[] = {a->getY(0), a->getY(1), a->getY(2)};
    for(int i = 0; i < 3; i++){
        if(isPointFitsTriangle(xA[i], yA[i], b)){
            return false;
        }
    }
    return true;
